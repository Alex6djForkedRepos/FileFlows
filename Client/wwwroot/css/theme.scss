$step:7;
$offset:7;

@mixin generate-base-colors($step: 7, $offset: 3) {
    $base-colors: ();

    @for $i from 0 through 5 {
        $name: nth(('base-darkest', 'base-darker', 'base', 'base-lighter', 'base-lightest', 'base-lightest-2'), $i + 1);
        $value: $offset + ($step * $i);
        $r: $value;
        $g: $value;
        $b: $value;
        
        $base-colors: map-merge($base-colors, (
                $name: rgb($r, $g, $b),
                '#{$name}-rgb': (#{$r}, #{$g}, #{$b})
        ));
    }

    @each $name, $color in $base-colors {
        --#{$name}: #{$color};
    }
}

body {
    @include generate-base-colors($step, $offset);
    
    
    --color: rgb(240, 240, 240);
    --color-rgb: 240, 240, 240;
    --color-darker: rgb(220, 220, 220);
    --color-darke-rgb: 220, 220, 220;
    --color-darkest: rgb(160, 160, 160);
    --color-darkest-rgb: 160, 160, 160;
    --accent: rgb(255, 0, 144);
    --accent-rgb: 255, 0, 144;
    --border-color: rgba(var(--color-rgb), 0.1);
    --input-background: rgb(49, 49, 49);
    --input-background-rgb: 49, 49, 49;
    --primary: #0366d6;
    --error: #ff4d76;
    --modified: rgba(var(--accent-rgb), 0.4);
    // flow colours
    --flow-logic: var(--orange);
    --flow-input: var(--indigo);
    --flow-output: var(--green);
    --flow-subflow: var(--green);
    --flow-process: var(--cyan);
    --flow-buildstart: var(--teal);
    --flow-buildend: var(--teal);
    --flow-buildpart: var(--blue);
    --flow-communication: var(--yellow);
    --flow-failure: var(--error);
    --flow-script:#c14242;
    
}
