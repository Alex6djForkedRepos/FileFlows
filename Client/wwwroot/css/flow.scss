$flowTypes: Logic, Input, Output, SubFlow, Process, BuildPart, BuildStart, BuildEnd, Communication, Failure, Script;
$ioSize: 10px;
$unit: 10px;
$ioFirst: 5 * $unit;
$fontSize: 14px;
$lineHeight: $fontSize * 1.2;

@mixin flowStyles($flowType, $borderColor, $backgroundColor) {
  &.#{$flowType} {
    &:not(.selected) {
      .icon-wrapper, .input > div, .output:not(.output--1) > div {
        border-color: $borderColor !important;
      }
    }

    .connected:not(.output--1) > div {
      @include fillIOConnection($borderColor);
    }
    .input.connected > div:before {
      bottom:3px;
    }
    .output:not(.output--1).connected > div:before {
      top:3px;
    }
  }
}

@mixin fillIOConnection($fillColor) {
  &:before {
    content: '';
    position: absolute;
    top: 3px + $unit;
    left: 3px + $unit;
    right: 3px + $unit;
    bottom: 3px + $unit;
    background: $fillColor; 
  }
}

@mixin flowPart($outputs, $height) {
  $pad: (4.5 * $unit);
  $oSpacing: 4 * $unit;
  @if $outputs < 4 {
    $oSpacing: 4 * $unit;
  } @else if $outputs < 6 {
    $oSpacing: 3 * $unit;    
  } @else {
    $oSpacing: $oSpacing / 2;
  }
  $width: $pad + 
          ($oSpacing * max(2, $outputs)) +          
          $pad;
  $center: $width / 2;
  
  $finalOutput: $pad + $oSpacing;
  
  .flow-part.size-#{$outputs}.height-#{$height} {
    $actualHeight:max($height * 2 * $unit + (2 * $unit), 6 * $unit);
    height: $actualHeight;
    .name {
      height:$height * $lineHeight;
      -webkit-line-clamp: $height;
    }
    .output {
      bottom:$unit * -1.5;
    }
    .output--1 {
      right:-$unit / 2 - $unit;
      top:$actualHeight / 2 - ($unit / 2) - $unit;
      bottom:unset;
    }
    // Additional styles based on the number of outputs
    @if $outputs == 1 {
      width: $width;
      .output-1 {
        left: $center - $unit;
      }
      // Styles for when there's only one output
    } @else if $outputs == 2 {
      // Styles for when there are two outputs
      width: $width;
      .output-1 {
        left: $center - $oSpacing - $unit;
      }
      .output-2 {
        left: $center + $oSpacing - $unit;
      }
    } @else {
      // Default styles for other cases
      @for $i from 1 through $outputs {
        .output-#{$i}
        {
          left: $pad + (($i - 1) * $oSpacing) - $unit;
          $finalOutput: $pad + (($i - 1) * $oSpacing);
        }
      }
      $width:$finalOutput + $pad;
      width: $width;
      $center: $width / 2;
    }

    .input {
      left:$center - $unit;
      top:$unit * -1.5;
    }
  }
}


.flow-part, .flow-element {
  --border-radius: 0;
  --border-width: 1px;
  border:solid var(--border-width);
  text-align: center;
  background: var(--base);
  
  @each $flowType in $flowTypes {
    &.#{$flowType}:not(.selected) {
      border-color: var(--flow-#{to-lower-case($flowType)});
      .icon-wrapper:before {
        background: var(--flow-#{to-lower-case($flowType)});
      }
    }
  }
  
  &.selected .icon-wrapper:before {
    background: unset !important;
  }
  
  .icon-wrapper {
    border-right: solid var(--border-width);
    width: 3 * $unit;
    min-width: 3 * $unit;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    &:before {
      content: ' ';
      position:absolute;
      top:0;
      bottom:0;
      right:0;
      left:0;
      z-index:1;
      opacity: 0.25;
    }

    .icon {
      z-index:2;
      padding-top: 3px;
      display: inline-block;
      vertical-align: middle;
    }
  }
}


.flow-element {
  padding: 0.25rem 0.25rem;
  margin: 0.5rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  position: relative;
  padding-left: 2.25rem;


  // Loop through different flow types and set their border color
  @each $flowType in $flowTypes {
    &.#{$flowType} .icon-wrapper {
      border-color: var(--flow-#{to-lower-case($flowType)});
    }
  }

  .label {
    flex-grow: 1;
  }

  &.obsolete, &.enterprise {
    .ribbon {
      display: unset;
    }
    .ribbon-content::before {
      font-style: normal;
      font-variant: normal;
      text-rendering: auto;
      -webkit-font-smoothing: antialiased;
      font-family: "Font Awesome 5 Free";
      font-weight: 900;
      content: "\f00d";
    }
  }
}


@for $i from 1 through 10 {
  @for $j from 1 through 4 {
    @include flowPart($i, $j);
  }
}

.flow-part {
  display: flex;
  flex-direction: row;
  outline: unset !important;
  position: relative;
  
  &.selected {
    border-color: var(--accent) !important;
    background-image: linear-gradient(rgba(var(--accent-rgb), 0.3), rgba(var(--accent-rgb), 0.3)) !important;
    background-color: unset;
    box-shadow: 0 3px 10px rgba(var(--accent-rgb), 0.1);
    .input, .output {
      > div {
        border-color: var(--accent);

        &:before {
          background: var(--accent) !important;
        }
      }
    }
  }

  .name {
    flex-grow: 1;
    padding: 0 ($unit / 2);
    margin-left: 3 * $unit;
    align-self: center;
    overflow:hidden;
    line-height:$lineHeight;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    white-space: normal;
  }

  .draggable {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 4;
  }

  * {
    user-select: none;
  }

  @include flowStyles(Logic, var(--flow-logic), var(--flow-logic));
  @include flowStyles(Input, var(--flow-input), var(--flow-input));
  @include flowStyles(Output, var(--flow-output), var(--flow-output));
  @include flowStyles(SubFlow, var(--flow-subflow), var(--flow-subflow));
  @include flowStyles(Process, var(--flow-process), var(--flow-process));
  @include flowStyles(BuildStart, var(--flow-buildstart), var(--flow-buildstart));
  @include flowStyles(BuildEnd, var(--flow-buildend), var(--flow-buildend));
  @include flowStyles(BuildPart, var(--flow-buildpart), var(--flow-buildpart));
  @include flowStyles(Communication, var(--flow-communication), var(--flow-communication));
  @include flowStyles(Failure, var(--flow-failure), var(--flow-failure));
  @include flowStyles(Script, var(--flow-script), var(--flow-script));

  .input, .output {
    position: absolute;
  }
  .input {
    padding:10px 10px 0 10px;
  }
  .output {
    padding:0 10px 10px 10px;
    &.output--1 {
      padding:10px 10px 10px 0;      
    }
  }
  .connected.output--1 > div {
    @include fillIOConnection(var(--error));    
    &:before {
      left:3px;
    }
  }

  &.selected {
    .icon-wrapper, .input > div {
      border-color: var(--accent) !important;
    }
    .connected > div {
      border-color: var(--accent) !important;
      background-color: unset !important;
    }
  }

  .input, .output {
    > div {
      width: $unit;
      height: $unit;
      border-radius: var(--border-radius);
      background-color: var(--base);
      border: solid var(--border-width);
    }
  }
  .output--1 {
    > div {
      border-color: var(--error) !important;
    }
  }
}

.ribbon {
  position: absolute;
  right: 8px;
  top: -3px;

  filter: drop-shadow(2px 3px 2px rgba(black, 0.5));
  display: none;

  > .ribbon-content {
    color: white;
    font-size: 0.75rem;
    text-align: center;
    font-weight: 400;
    background: #a90101 linear-gradient(45deg, rgba(black, 0) 0%, rgba(white, 0.25) 100%);
    padding: 8px 2px 4px;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 50% calc(100% - 4px), 0 100%);
    width: 20px;
    min-height: 20px;
    transition: clip-path 1s, padding 1s, background 1s;
  }
}

.enterprise:not(.obsolete) .ribbon {
  > .ribbon-content {
    background: #12a901 linear-gradient(45deg, rgba(black, 0) 0%, rgba(white, 0.25) 100%);
    &::before {
      content: '\f19c';
    }
  }
}
