$flowTypes: Logic, Input, Output, SubFlow, Process, BuildPart, BuildStart, BuildEnd, Communication, Failure, Script;

@mixin flowStyles($flowType, $borderColor, $backgroundColor) {
  &.#{$flowType}:not(.selected) {
    .icon-wrapper, .input > div, .output:not(.output--1) > div {
      border-color: $borderColor !important;
    }

    .connected:not(.output--1) > div {
      background-color: $backgroundColor !important;
    }
  }
}

@mixin flowIOStyles($bottom) {
  position: absolute;
  top: -1rem;
  bottom: $bottom;
  left: 2.25rem;
  right: 0;
  width: unset;
  z-index: 2;
  .input, .output {
    position: absolute;
  }
}

@mixin outputs($num, $left, $spacing) {
  .outputs-#{$num} {
    @for $j from 1 through $num {
      .output-#{$j} {
        left: ($j - 1) * $spacing + $left;
      }
    }
  }
}

.flow-part {
  &.selected {
    border-color: var(--accent) !important;
    background-image: linear-gradient(rgba(var(--accent-rgb), 0.3), rgba(var(--accent-rgb), 0.3)) !important;
    background-color: unset;
    box-shadow: 0 3px 10px rgba(var(--accent-rgb), 0.1);
  }
}

.flow-element {
  padding: 0.25rem 0.25rem;
  margin: 0.5rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  position: relative;
  padding-left: 2.25rem;

  .icon-wrapper {
    width: 2rem;
    min-width: 2rem;
    border-right: solid 3px;
    margin-right: 0.25rem;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;

    .icon {
      padding-top: 3px;
      display: inline-block;
      vertical-align: middle;
    }
  }

  // Loop through different flow types and set their border color
  @each $flowType in $flowTypes {
    &.#{$flowType} .icon-wrapper {
      border-color: var(--flow-#{to-lower-case($flowType)});
    }
  }

  .label {
    flex-grow: 1;
  }

  &.obsolete, &.enterprise {
    .ribbon {
      display: unset;
    }
    .ribbon-content::before {
      font-style: normal;
      font-variant: normal;
      text-rendering: auto;
      -webkit-font-smoothing: antialiased;
      font-family: "Font Awesome 5 Free";
      font-weight: 900;
      content: "\f00d";
    }
  }
}

.flow-part {
  display: flex;
  flex-direction: row;
  outline: unset !important;
  min-height: 4rem;
  position: relative;

  .icon-wrapper {
    width: 2rem;
    min-width: 2rem;
    border-right: solid 3px;
    margin: 0;
    display: flex;

    .icon {
      margin: auto;
    }
  }

  .name {
    flex-grow: 1;
    margin: auto 0.5rem;
    padding: 0.5rem 0.5rem 0.5rem 0;
  }

  .draggable {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 4;
  }

  .error {
    position: absolute;
    top: 0;
    bottom: 0;
    right: -1rem;
    display: inline-flex;
    align-items: center;
    width: 2rem;
  }

  .error-output {
    width: 1rem;
    height: 1rem;
    margin: 0.5rem;
    border-radius: 0.25rem;
    background-color: var(--base);
    border: solid 2px var(--error);

    &:hover {
      cursor: crosshair;
    }
  }

  * {
    user-select: none;
  }

  &.size-1, &.size-2, &.size-3 {
    width: 12rem;
  }

  @for $i from 4 through 8 {
    &.size-#{$i} {
      width: calc(12rem + #{$i}rem);
    }
  }

  &.size-9 {
    width: calc(12rem + 11rem);
  }

  &.size-10 {
    width: calc(12rem + 13rem);
  }

  @include flowStyles(Logic, var(--flow-logic), var(--flow-logic));
  @include flowStyles(Input, var(--flow-input), var(--flow-input));
  @include flowStyles(Output, var(--flow-output), var(--flow-output));
  @include flowStyles(SubFlow, var(--flow-subflow), var(--flow-subflow));
  @include flowStyles(Process, var(--flow-process), var(--flow-process));
  @include flowStyles(BuildStart, var(--flow-buildstart), var(--flow-buildstart));
  @include flowStyles(BuildEnd, var(--flow-buildend), var(--flow-buildend));
  @include flowStyles(BuildPart, var(--flow-buildpart), var(--flow-buildpart));
  @include flowStyles(Communication, var(--flow-communication), var(--flow-communication));
  @include flowStyles(Failure, var(--flow-failure), var(--flow-failure));
  @include flowStyles(Script, var(--flow-script), var(--flow-script));

  .connected.output--1 > div {
    background-color: var(--error) !important;
  }

  &.selected {
    .icon-wrapper, .input > div, .output:not(.output--1) > div {
      border-color: var(--accent) !important;
    }

    .connected > div {
      background-color: var(--accent) !important;
    }
  }

  .inputs {
    @include flowIOStyles(0);
    z-index: 3;
    left: calc(1rem + 1px);
    display: flex;
    justify-content: center;
    .input {
      left: unset;
    }
  }

  .outputs {
    right: -0.65rem;
    @include flowIOStyles(unset);
    .output {
      bottom: -2rem;
    }
  }

  .inputs, .outputs {
    .input, .output {
      margin: auto;

      > div {
        width: 1rem;
        height: 1rem;
        margin: 0.5rem;
        border-radius: 0.25rem;
        background-color: var(--base);
        border: solid 2px;
      }
    }
  }

  // Outputs mixin for different output numbers
  @include outputs(1, 45px, 0);
  .outputs {
    bottom: 13px !important;
  }
  .output--1 {
    right: -1rem;
    left: unset !important;
    top: 50%;
    > div {
      border-color: var(--error) !important;
    }
  }

  @include outputs(2, 5px, 90px);
  @include outputs(3, 5px, 45px);
  @include outputs(4, 5px, 50px);
  @include outputs(5, 5px, 40px);
  @include outputs(6, 15px, 30px);
  @include outputs(7, 5px, 30px);
  @include outputs(8, 5px, 30px);
  @include outputs(9, 5px, 30px);
  @include outputs(10, 5px, 30px);
}

.flow-part, .flow-element {
  text-align: center;
  border-radius: 0.5rem;
  min-width: 12rem;
  border: solid 2px transparent;
  background: var(--base);


  @each $flowType in $flowTypes {
    &.#{$flowType} {
      border-color: var(--flow-#{to-lower-case($flowType)});
    }
  }
}

.ribbon {
  position: absolute;
  right: 8px;
  top: -3px;

  filter: drop-shadow(2px 3px 2px rgba(black, 0.5));
  display: none;

  > .ribbon-content {
    color: white;
    font-size: 0.75rem;
    text-align: center;
    font-weight: 400;
    background: #a90101 linear-gradient(45deg, rgba(black, 0) 0%, rgba(white, 0.25) 100%);
    padding: 8px 2px 4px;
    clip-path: polygon(0 0, 100% 0, 100% 100%, 50% calc(100% - 4px), 0 100%);
    width: 20px;
    min-height: 20px;
    transition: clip-path 1s, padding 1s, background 1s;
  }
}

.enterprise:not(.obsolete) .ribbon {
  > .ribbon-content {
    background: #12a901 linear-gradient(45deg, rgba(black, 0) 0%, rgba(white, 0.25) 100%);
    &::before {
      content: '\f19c';
    }
  }
}
