@namespace FileFlows.Client.Components.Common
@inherits FlowTableBase
@typeparam TItem

@{
    string style = string.IsNullOrEmpty(MinWidth) ? "" : $"min-width:{MinWidth};";
}
<div class="flowtable @(HideHead ? "hide-head" : "") @(HideToolbar ? "hide-toolbar" : "")">
    <div class="flow-table-inner" style="@style">

        <CascadingValue Value="this">
            @Columns

            @if (HideToolbar != true)
            {
                <div class="flowtable-toolbar">

                    <div class="flowtable-toolbar-buttons">
                        @ToolBar
                    </div>
                    <div class="flowtable-toolbar-filter">
                        <input @ref="eleFilter" type="text" @bind-value="FilterText" @bind-value:event="oninput" @onkeydown="FilterKeyDown" placeholder="@(App.Instance.IsMobile ? lblFilter : lblFilterPlaceholder)" autocomplete="off"/>
                        <i class="fas fa-search"></i>
                    </div>
                </div>
            }
        </CascadingValue>
        <style> 
        @foreach(var col in this.ColumnList)
        {
            string hashcode = ".col-" + col.GetHashCode();
            <text>
                .flowtable-header @hashcode { 
                    text-align:@col.HeaderAlign.ToString().ToLower();
                }
                .flowtable-body @hashcode { 
                    text-align:@col.ColumnAlign.ToString().ToLower();
                }
            </text>
            <text>
            @hashcode { 
                @if (App.Instance.IsMobile && string.IsNullOrEmpty(col.MobileWidth) == false)
                {
                    if (col.MobileWidth == "0")
                    {
                        <text>
                        display:none;
                        </text>
                    }
                    else
                    {
                        <text>
                        min-width:@col.MobileWidth;
                        max-width:@col.MobileWidth;
                        width:@col.MobileWidth;
                        </text>
                    }
                }
                else if(string.IsNullOrEmpty(col.Width) == false)
                {
                    <text>
                        min-width:@col.Width;
                        max-width:@col.Width;
                        width:@col.Width;
                    </text>
                }
            }
            </text>
            @if(string.IsNullOrEmpty(col.LargeWidth) == false)
            {
                <text>
                @@media screen and (min-width:2100px)
                {
                    @hashcode
                    {
                        min-width:@col.LargeWidth;
                        max-width:@col.LargeWidth;
                        width:@col.LargeWidth;
                    }
                }
                </text>
            }
            @if(string.IsNullOrEmpty(col.MobileWidth) == false)
            {
                <text>
                    @@media screen and (max-width: 578px) {
                        @hashcode {
                            min-width:@(col.MobileWidth == "auto" ? "unset" : col.MobileWidth);
                            max-width:@(col.MobileWidth == "auto" ? "unset" : col.MobileWidth);
                            width:@(col.MobileWidth == "auto" ? "unset" : col.MobileWidth);

                        }
                    }
                </text>
            }
        }
    </style>

    <div id="@Uid" class="flowtable-data">

        @if (HideHead == false)
        {
            <div class="flowtable-header">
                <div class="flowtable-row flowtable-header-row">
                    @if (Selection != SelectionMode.None)
                    {
                        <label class="flowtable-select" style="width:2rem;min-width:2rem;max-width:2rem">
                            <input type="checkbox" @onchange="(e) => SelectAll(e)" checked="@(DisplayData.Any(i => SelectedItems != null && SelectedItems.Contains(i.Key)))"/>
                        </label>
                    }
                    @foreach (var col in ColumnList)
                    {
                        string hashcode = "col-" + col.GetHashCode();
                        <span class="@col.ClassName @hashcode @(col.Hidden ? "hidden" : "")" data-width="@col.Width" style="@col.Style">
                            @col.Header
                        </span>
                    }
                </div>
            </div>
        }
        <FlowContextMenu CssClass="flowtable-body" @ref=TableContextMenu PreShow="ContextMenuPreShow">
            @if (DisplayData?.Any() == true)
            {
                <Virtualize Items="@DisplayData" Context="item" ItemSize="25"  OverscanCount="4">
                    @{
                        bool selected = Selection != SelectionMode.None && SelectedItems?.Contains(item.Key) == true;
                        bool disabled = DisableColumn?.Invoke(item.Key) ?? false;
                    }
                    <div class="flowtable-row @(selected ? "selected" : "") @(disabled ? "disabled" : "")" 
                         @ondblclick="() => OnDoubleClick(item.Key)" 
                         @onclick="(e) => OnClick(e, item.Key)" 
                         @onclick:preventDefault @onclick:stopPropagation>
                        @if(Selection!= SelectionMode.None)
                        {
                            <label class="flowtable-select" style="width:2rem;min-width:2rem;max-width:2rem;align-self: center;">
                                <input type="checkbox" @onchange="(e) => CheckItem(e, item.Key)" 
                                       disabled="@(ForcedSelection?.Contains(item.Key))"
                                       checked="@(ForcedSelection?.Contains(item.Key) == true || SelectedItems?.Contains(item.Key) == true)"
                                       onclick="ff.stopSelectPropagation(event)" />                        
                            </label>
                        }
                        @foreach (var col in ColumnList)
                        {
                            string hashcode = "col-" + col.GetHashCode();
                            <span class="column @col.ClassName @hashcode @(col.Pre ? "pre-text" : "") @(col.NoHeight ? "no-height" : "") @(col.Hidden ? "hidden": "")" style="@col.Style">
                                @col.Cell(item.Key)
                            </span>
                        }
                    </div>                        
                </Virtualize>
            }
        </FlowContextMenu>
        @if (PagerVisible)
        {
            <CascadingValue Value="this" IsFixed="true">
                <FlowPager TItem="TItem" />
            </CascadingValue>
        }
    </div>
    

    </div>
</div>
