@namespace FileFlows.Client.Components

@using FileFlows.Plugin
@using FileFlows.Shared
@using FileFlows.Client.Helpers
@using FileFlows.Shared.Widgets
@using Microsoft.Extensions.Logging

@{
    string label = string.IsNullOrEmpty(field.Label) == false ? field.Label : IsScript ? FlowHelper.FormatLabel(field.Name) : TypeName + ".Fields." + field.Name;
    if (string.IsNullOrWhiteSpace(field.Placeholder))
    {
        field.Placeholder = Translater.Instant(label + "-Placeholder").EmptyAsNull() ?? string.Empty;
    }

    bool readOnly = GetParameter<bool>(field, "ReadOnly");
    bool hideLabel = GetParameter<bool>(field, "HideLabel");
    switch (field.InputType)
    {
        case FormInputType.Text:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputText Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.TextVariable:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputTextVariables Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Variables=@field.Variables Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.TextArea:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputTextArea Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Password:
            {
                var value = GetValue<string>(field.Name) ?? "";
                <InputPassword Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.LogView:
            {
                var value = GetValue<string>(field.Name) ?? "";
                var refreshUrl = GetParameter<string>(field, nameof(InputLogView.RefreshUrl)) ?? "";
                var refreshSeconds = GetParameter<int>(field, nameof(InputLogView.RefreshSeconds));
                <InputLogView Field=@field Label="@label" Value="@value" RefreshUrl="@refreshUrl"
    RefreshSeconds="@refreshSeconds" Placeholder="@field.Placeholder" HideLabel=@hideLabel Help=@field.HelpText />
            }
            break;
        case FormInputType.Int:
            {
                var value = GetValue<int>(field.Name);
                var min = GetParameter<int>(field, "Min");
                var max = GetParameter<int>(field, "Max");
                if (min == 0 && max == 0)
                {
                    (min, max) = GetRange(field);
                }
                <InputNumber TItem="int" Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" Min="@min" Max="@max" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Period:
        {
            var value = GetValue<int>(field.Name);
            <InputPeriod Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.FileSize:
        {
            var value = GetValue<int>(field.Name);
            <InputFileSize Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Float:
        {
            var value = GetValue<float>(field.Name);
            var min = GetParameter<int>(field, "Min");
            var max = GetParameter<int>(field, "Max");
            if (min == 0 && max == 0)
            {
                (min, max) = GetRange(field);
            }
            <InputNumber TItem="float" Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                         Validators=@field.Validators Placeholder="@field.Placeholder" Min="@((float)min)" Max="@((float)max)" 
                         HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
        }
            break;
        case FormInputType.Checklist:
            {
                var value = GetValue<List<object>>(field.Name);
                var listOnly = GetParameter<bool>(field, "ListOnly");
                var options = GetParameter<List<ListOption>>(field, nameof(InputChecklist.Options));
                <InputChecklist Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Options="@options" HideLabel=@hideLabel ListOnly=@listOnly OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Slider:
            {
                var value = GetValue<int>(field.Name);
                int min = GetParameter<int>(field, nameof(InputSlider.Min));
                int max = GetParameter<int>(field, nameof(InputSlider.Max));
                bool inverse = GetParameter<bool>(field, nameof(InputSlider.Inverse));
                if (min == 0 && max == 0)
                {
                    (min, max) = GetRange(field);
                }
                <InputSlider Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                             Validators=@field.Validators Placeholder="@field.Placeholder" Min="@min" Max="@max" 
                             Inverse=@inverse HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Switch:
            {
                var value = GetValue<bool>(field.Name);
                bool inverse = GetParameter<bool>(field, nameof(InputSwitch.Inverse));
                <InputSwitch Field=@field Label="@label" Value="@value" Inverse=@inverse ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                             Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Widget:
            {
                var value = GetValue<bool>(field.Name);
                var pType = GetParameter<WidgetType>(field, nameof(InputWidget.Type));
                <InputWidget Field=@field Label="@label"  HideLabel=@hideLabel Type=@pType Value=@value ValueChanged="@(x => UpdateValue(field, x))" Help=@field.HelpText />
            }
            break;
        case FormInputType.StringArray:
            {
                var value = GetValue<string[]>(field.Name, new string[] { });
                <InputArray Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
    Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Select:
            {
                var value = GetValue<object>(field.Name, "");
                bool allowClear = GetParameter<bool>(field, nameof(InputSelect.AllowClear), true);
                bool showDescription= GetParameter<bool>(field, nameof(InputSelect.ShowDescription), true);
                var options = GetParameter<List<FileFlows.Plugin.ListOption>>(field, "Options");
                <InputSelect Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Options=@options AllowClear=@allowClear
                             ValueChanged="@(x => UpdateValue(field, x))" Placeholder="@field.Placeholder" 
                             ShowDescription=@showDescription HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.File:
            {
                var value = GetValue<string>(field.Name, "");
                var extensions = GetParameter<List<string>>(field, "Extensions")?.ToArray();
                <InputFile Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Extensions=@extensions Validators=@field.Validators
                           ValueChanged="@(x => UpdateValue(field, x))" Variables=@field.Variables 
                           Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Folder:
            {
                var value = GetValue<string>(field.Name, "");
                <InputFile Field=@field Label="@label" Value="@value" ReadOnly=@readOnly Directory=@true Validators=@field.Validators
                           ValueChanged="@(x => UpdateValue(field, x))" Variables=@field.Variables  
                           Placeholder="@field.Placeholder" HideLabel=@hideLabel OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Code:
            {
                var value = GetValue<string>(field.Name);
                <InputCode Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                           Validators=@field.Validators Variables=@field.Variables Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                           OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.Schedule:
            {
                var value = GetValue<string>(field.Name);
                <InputSchedule Field=@field Label="@label" Value="@value" ReadOnly=@readOnly 
                               ValueChanged="@(x => UpdateValue(field, x))" HideLabel=@hideLabel 
                               OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.KeyValue:
            {
                var value = GetValue<List<KeyValuePair<string, string>>>(field.Name);
                <InputKeyValue Field=@field Label="@label" Value="@value" ReadOnly=@readOnly ValueChanged="@(x => UpdateValue(field, x))"
                               Validators=@field.Validators Placeholder="@field.Placeholder" HideLabel=@hideLabel 
                               OnSubmit=@OnSubmit OnClose=@OnClose Help=@field.HelpText />
            }
            break;
        case FormInputType.TextLabel:
            {
                object oValue = GetValue<object>(field.Name);
                var pre = GetParameter<bool>(field, nameof(InputTextLabel.Pre));
                var link = GetParameter<bool>(field, nameof(InputTextLabel.Link));
                var formatter = GetParameter<string>(field, nameof(InputTextLabel.Formatter));
                <InputTextLabel Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel 
                                Pre=@pre Link=@link Formatter="@formatter" Help=@field.HelpText />
            }
            break;
        case FormInputType.ExecutedNodes:
            {
                var oValue = GetValue<List<ExecutedNode>>(field.Name);
                var log = GetParameter<string>(field, nameof(InputExecutedNodes.Log));
                <InputExecutedNodes Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel Log=@log />
            }
            break;
        case FormInputType.Metadata:
            {
                var oValue = GetValue<Dictionary<string, object>>(field.Name);
                <InputMetadata Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel />
            }
            break;
        case FormInputType.Table:
            {
                <p>ADDING A TABLE</p>
                var columns = GetParameter<List<InputTableColumn>>(field, nameof(InputTable.Columns), new List<InputTableColumn>());
                var type = GetParameter<Type>(field, nameof(InputTable.TableType));
                var oValue = GetValue(field.Name, type);
                if(oValue == null)
                {
                    Type genericListType = typeof(List<>).MakeGenericType(type);
                    oValue = Activator.CreateInstance(genericListType);
                }
                <InputTable Field=@field Label="@label" Value="@oValue" HideLabel=@hideLabel TableType=@type Columns=@columns />
            }
            break;
        case FormInputType.Label:
            {
                <div class="input-label">
                    @Translater.TranslateIfNeeded(label)
                </div>
            }
            break;
        case FormInputType.HorizontalRule:
            {
                <div class="input-horizontal-rule"></div>
            }
            break;
        default:
            {
                <span>couldnt find type @field.InputType</span>
            }
            break;
    }
    }