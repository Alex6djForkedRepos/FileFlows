@using FileFlows.Plugin
@namespace FileFlows.Client.Components

<div class="flow-elements-tab-inner">
    <div class="flow-elements-top">
        <div class="flow-elements-filter">
            <input @ref="eleFilter" type="text" @bind-value="txtFilter" @bind-value:event="oninput" autocomplete="off" placeholder="@lblFilter" @onkeydown="FilterKeyDown"/>
            <i class="fas fa-search"></i>
        </div>
    </div>
    <ul id="flow-elements-available">
        @if (Filtered != null)
        {
            var groups = Filtered.GroupBy(x => x.Group).ToArray();
            @foreach (var grp in groups)
            {
                if (groups.Length > 1)
                {
                    <li class="group">@Helpers.FlowHelper.FormatLabel(grp.Key)</li>
                }

                foreach (var ele in grp.OrderBy(x => x.Type == FlowElementType.Script ? x.Name : string.Empty)
                             .ThenBy(x =>
                             {
                                 if (grp.Key != "FfmpegBuilderNodes")
                                     return (int)x.Type;
                                 if (x.Type == FlowElementType.BuildStart)
                                     return 1;
                                 if (x.Type == FlowElementType.BuildEnd)
                                     return 2;
                                 if (x.Type == FlowElementType.BuildPart)
                                     return 3;
                                 return 100 + (int)x.Type;
                             }).ThenBy(x => x.DisplayName.Substring(x.DisplayName.IndexOf(":", StringComparison.Ordinal) + 1)))
                {
                    <li id="@ele.Uid" draggable="true" class="flow-element draggable @ele.Type 
                            @(ele.Obsolete ? "obsolete" : "") @(ele.Enterprise ? "enterprise" : "")
                             @(App.Instance.IsMobile && SelectedElement == ele.Uid ? "selected" : "") "
                       ondragstart="ffFlow.Mouse.dragElementStart(event)" @onclick="@(() => SelectPart(ele.Uid))">
                        <div class="icon-wrapper"><span class="icon @ele.Icon"></span></div>
                        @((ele.Type == FlowElementType.Script) ? ele.Name : ele.DisplayName[(ele.DisplayName.IndexOf(":", StringComparison.Ordinal) + 1)..])

                        @{
                            string ribbonTT = "";
                            if (ele.Obsolete)
                            {
                                ribbonTT = ele.ObsoleteMessage?.EmptyAsNull() ?? lblObsoleteMessage;
                            }
                            else if (ele.Enterprise)
                            {
                                ribbonTT = "Enterprise Flow Element";
                            }
                        }

                        <div class="ribbon" title="@ribbonTT">
                            <div class="ribbon-content">
                            </div>
                        </div>
                    </li>
                }
            }
        }
    </ul>
</div>
