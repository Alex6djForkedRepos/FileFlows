@namespace FileFlows.Client.Components.Dialogs

@if (Templates != null)
{
    <Modal Title="@lblTitle" Visible="Visible" Styling="width:min(90vw, 60rem);max-width: unset;max-height: unset;">
        <Body>
        <span>@lblDescription</span>
        <div class="top-bar">
            <div class="tag-filter">
                <div class="top-level-tag">
                    @foreach (var tag in Tags)
                    {
                        if (tag.IndexOf(":") > 0)
                        {
                            continue;
                        }
                        <span class="tag @(SelectedTag == tag ? "selected" : string.Empty)" @onclick="((ev) => ToggleTag(ev, tag))">@tag</span>
                    }
                </div>
                @if (SelectedTag.Any())
                {
                    <div class="sub-tags">
                        @foreach (var tag in Tags.Where(x => x.StartsWith(SelectedTag +":")))
                        {
                            <span class="tag @(SelectedSubTag == tag ? "selected" : string.Empty)" @onclick="((ev) => ToggleSubTag(ev, tag))">@tag.Substring(tag.IndexOf(":") + 1)</span>
                        }
                    </div>
                }
            </div>
            <div class="filter">
                <input type="text" placeholder="@lblFilter" @bind-value="FilterText" @bind-value:event="oninput" @onkeydown="FilterKeyDown"  autocomplete="off" / />
                <i class="fas fa-search" @onclick="() => Filter()"></i>
            </div>
        </div>
        <div class="templates">
            @foreach (var template in FilteredTemplates)
            {
                if (string.IsNullOrEmpty(SelectedTag) == false)
                {
                    if (template.Tags.Contains(SelectedTag) == false)
                    {
                        continue;
                    }
                    if (string.IsNullOrEmpty(SelectedSubTag) == false && template.Tags.Contains(SelectedSubTag) == false)
                    {
                        continue;
                    }
                }
                <FlowTemplateItem Template="@template" Selected="@(Selected == template)" 
                                  OnClick="@((_,_) => SelectTemplate(template))"
                                  OnDoubleClick="@((_,_) => SelectTemplate(template, true))"/>
            }
        </div>
        </Body>
        <Footer>
            <button @onclick=@New disabled="@(Selected == null)">@lblNext &gt;</button>
            <button @onclick=@Cancel>@lblCancel</button>
        </Footer>
    </Modal>
}