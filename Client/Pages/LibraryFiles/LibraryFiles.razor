@namespace FileFlows.Client.Pages
@using FileFlows.Shared.Models
@using Microsoft.AspNetCore.Components
@using FileFlows.Client.Helpers
@inherits ListPage<Guid, LibaryFileListModel>

@page "/library-files"

<PageView Flex="@true" Title="@Title">

<Head>
    <a class="btn" @onclick=@Search>@lblSearch</a>
</Head>

<Body>

<FlowSkyBox TItem="FileStatus" @ref=Skybox OnSelected=@SetSelected />

@if (SelectedStatus == FileStatus.MissingLibrary)
{
    <div class="info box">The libraries these files belong to have been deleted. A new library may have been created with the same path, but the ID of the library has changed.
        To process these files, delete them and scan the library again.
    </div>
}

<FlowTable @ref="Table" Data="@Data" TItem="LibaryFileListModel" Selection="SelectionMode.Multiple"
           DoubleClick="@OnDoubleClick" MinWidth="@NameMinWidth">
    <ToolBar>
        <FlowTableButton TItem="LibaryFileListModel" Clicked=Edit SelectedOne="true" Icon="fas fa-file" Label="Labels.View" />
        @if (Skybox?.SelectedItem?.Value == FileStatus.Duplicate)
        {
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Reprocess SelectedOneOrMore="true" Icon="fas fa-redo" Label="Pages.LibraryFiles.Buttons.Process" />
        }
        @if (SelectedStatus == FileStatus.Processing)
        {
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Cancel SelectedOneOrMore="true" Icon="fas fa-window-close" Label="Labels.Cancel" />
        }
        else
        {
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Delete SelectedOneOrMore="true" Icon="fas fa-trash" Label="Labels.Delete" />
        }

        @if (SelectedStatus == FileStatus.Unprocessed)
        {
            <FlowTableButtonSeparator />    
            <FlowTableButton TItem="LibaryFileListModel" Clicked=MoveToTop SelectedOneOrMore="true" Icon="far fa-caret-square-up" Label="Pages.LibraryFiles.Buttons.MoveToTop" />
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Rescan Icon="fas fa-search-plus" Label="Labels.Rescan" />
        }
        else if (SelectedStatus == FileStatus.Processed || SelectedStatus == FileStatus.ProcessingFailed || SelectedStatus == FileStatus.MappingIssue)
        {
            <FlowTableButtonSeparator />    
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Reprocess SelectedOneOrMore="true" Icon="fas fa-redo" Label="Pages.LibraryFiles.Buttons.Reprocess" />
        }
        else if (SelectedStatus == FileStatus.OnHold)
        {
            <FlowTableButtonSeparator />    
            <FlowTableButton TItem="LibaryFileListModel" Clicked=Unhold SelectedOneOrMore="true" Icon="fas fa-running" Label="Pages.LibraryFiles.Buttons.Unhold" />
        }
        <FlowTableButtonSeparator />    
        <FlowTableHelpButton TItem="LibaryFileListModel" HelpUrl="library-files" />
    </ToolBar>

    <Columns>
        <FlowTableColumn TItem="LibaryFileListModel" Hidden="(SelectedStatus == FileStatus.Duplicate)">
            <Header>
                @Globals.lblName
            </Header>
            <Cell Context="item">
                <span>@item.RelativePath</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Hidden="(SelectedStatus != FileStatus.Duplicate)" Pre="true">
            <Header>
                @Globals.lblName
            </Header>
            <Cell Context="item">@item.Name
                @item.Duplicate</Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="10rem" MobileWidth="0" Hidden="@((SelectedStatus == FileStatus.Unprocessed || SelectedStatus == FileStatus.Processed || SelectedStatus == FileStatus.Processing || SelectedStatus == FileStatus.ProcessingFailed || SelectedStatus == FileStatus.OutOfSchedule || SelectedStatus == FileStatus.Disabled) == false)">
            <Header>
                @if (SelectedStatus == FileStatus.Unprocessed || SelectedStatus == FileStatus.OutOfSchedule || SelectedStatus == FileStatus.Disabled)
                {
                    <span>Found</span>
                }
                else if (SelectedStatus == FileStatus.Processing)
                {
                    <span>Started</span>
                }
                else if (SelectedStatus == FileStatus.Processed)
                {
                    <span>Finished</span>
                }
                else if (SelectedStatus == FileStatus.ProcessingFailed)
                {
                    <span>Failed</span>
                }
            </Header>
            <Cell Context="item">
                <span>@DateString(item.Date)</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="12rem" MobileWidth="0" Hidden="@((int)SelectedStatus < 1 || SelectedStatus == FileStatus.Duplicate || SelectedStatus == FileStatus.MissingLibrary)">
            <Header>
                Flow
            </Header>
            <Cell Context="item">
                <span>@item.Flow</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="12rem" MobileWidth="0" Hidden="(SelectedStatus == FileStatus.Processing || SelectedStatus == FileStatus.MissingLibrary)">
            <Header>
                Library
            </Header>
            <Cell Context="item">
                <span>@item.Library</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="12rem" MobileWidth="0" Hidden="(SelectedStatus != FileStatus.Processing)">
            <Header>
                Node
            </Header>
            <Cell Context="item">
                @if (item.Node == "FileFlowsServer")
                {
                    <span>@lblFileFlowsServer</span>
                }
                else
                {
                    <span>@item.Node</span>
                }
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="6rem" Hidden="((SelectedStatus == FileStatus.Processed || SelectedStatus == FileStatus.Processing || SelectedStatus == FileStatus.OnHold) == false)" MobileWidth="5rem">
            <Header>
                Time
            </Header>
            <Cell Context="item">
                <span>@String.Format(@"{0:hh\:mm\:ss}", item.ProcessingTime)</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="6rem" Hidden="SelectedStatus != FileStatus.MissingLibrary" MobileWidth="10rem">
            <Header>
                Status
            </Header>
            <Cell Context="item">
                <span>@(item.Status == null ? string.Empty : Translater.Instant("Enums.FileStatus." + item.Status))</span>
            </Cell>
        </FlowTableColumn>
        <FlowTableColumn TItem="LibaryFileListModel" Width="min(6rem, 10vw)" Hidden="@(SelectedStatus != FileStatus.Processed || App.Instance.IsMobile)">
            <Header>
                Size
            </Header>
            <Cell Context="item">
                @{
                    long fs = item.FinalSize ?? 0;
                    long os = item.OriginalSize ?? 0;
                    int width = (int)((((double)fs) / os) * 100);
                    bool bigger = width > 100;
                    if (width > 100)
                        width = 100;
                    string toolTip = Helpers.FileSizeFormatter.FormatShrinkage(os, fs);
                }
                @if (fs > 0)
                {
                    <div class="flow-bar @(bigger ? "grew" : "")" title="@toolTip">
                        <div class="bar-value" style="width:calc(@(width)% - 2px)"></div>
                    </div>
                }
            </Cell>
        </FlowTableColumn>
    </Columns>
</FlowTable>
<div class="pager">
    <div class="page-size">
        <select class="page-size" @onchange=@PageSizeChange>
            @foreach (int size in new[] { 100, 250, 500, 750, 1000, 1500, 2000, 2500, 3000, 5000 })
            {
                <option selected=@(PageSize == size)>@size</option>
            }
        </select>
    </div>
    @if (TotalItems > PageSize)
    {
        <ul>
            @{
                int maxPages = App.Instance.IsMobile ? 7 : 15;
                int start = PageIndex - (maxPages / 2);
                if (start < 0)
                    start = 0;
                int end = Math.Min(PageCount, start + maxPages);
                if (end < PageCount - 1)
                    --end;
                if (end == PageCount)
                    start = end - maxPages;
                if (start < 0)
                    start = 0;
                if (start > 0)
                {
                    if (PageIndex == start)
                        --end;
                    else
                        ++start;
                }
            }
            @if (start > 0)
            {
                <li @onclick=@(() => PageChange(0))>1</li>
                <li class="spacer">...</li>
            }
            @for (int i = start; i < end; i++)
            {
                int page = i;
                <li class="@(page == PageIndex ? "current-page" : "")" @onclick=@(() => PageChange(page))>@(page + 1)</li>
            }
            @if (end < PageCount - 1)
            {
                <li class="spacer">...</li>
                <li @onclick=@(() => PageChange(PageCount - 1))>@(PageCount)</li>
            }
        </ul>
    }
</div>
</Body>

</PageView>