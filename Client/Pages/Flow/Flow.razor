@namespace FileFlows.Client.Pages

@page "/flows/{uid:guid}"
@using FileFlows.Plugin

<div class="flow-wrapper">
    <div class="flow-container @(App.Instance.NavMenuCollapsed ? "has-collapsed-menu" : "") @(App.Instance.IsMobile ? (ElementsVisible ? "elements-visible" : "elements-hidden") : "")">
        @if (App.Instance.IsMobile)
        {
            <i id="show-elements" class="show-elements fas fa-sitemap" @onclick="ShowElementsOnClick"></i>
        }
        <div class="flow-elements">
            <FlowTabs TitleOnlyOnActive="true" ContainTabs="true">
                <FlowTab Icon="fas fa-puzzle-piece" Title="@lblPlugins" Visible="@(AvailablePlugins?.Any() == true)">
                    <FlowElementList @ref="eleListPlugins" Items="@AvailablePlugins" DefaultGroup="File" OnDragStart="@HandleDragStart"
                                     AddSelectedElement="AddSelectedElement" Close="@CloseElements" />
                </FlowTab>
                <FlowTab Icon="fas fa-scroll" Title="@lblScripts" Visible="@(AvailableScripts != null)">
                    <FlowElementList @ref="eleListScripts"  Items="@AvailableScripts" OnDragStart="@HandleDragStart"
                                     AddSelectedElement="AddSelectedElement" Close="@CloseElements"
                                     OpenScriptBrowser="@(() => _ = OpenScriptBrowser())" />
                </FlowTab>
                <FlowTab Icon="fas fa-subway" Title="@lblSubFlows" Visible="@(AvailableSubFlows?.Any() == true)">
                    <FlowElementList @ref="eleListSubFlows"  Items="@AvailableSubFlows" DefaultGroup="Sub Flows" OnDragStart="@HandleDragStart"
                                     AddSelectedElement="AddSelectedElement" Close="@CloseElements" />
                </FlowTab>
            </FlowTabs>
        </div>
        <div class="flows-tabs">
            <div class="flows-tabs-top">
                <div class="flows-tabs-buttons">
                    @foreach (var flowEditor in OpenedFlows)
                    {
                        bool active = flowEditor == ActiveFlow;
                        <div class="flows-tab-button @(active ? "active" : "") @(flowEditor.IsDirty ? "dirty" : "")">
                            @if (active)
                            {
                                <span class="flow-name">
                                    <input type="text" @bind-value="@flowEditor.Flow.Name" id="flow-@flowEditor.Flow.Uid-name"/>
                                </span>
                            }
                            else
                            {
                                <span class="flow-name" @onclick="() => ActivateFlow(flowEditor)">
                                    @flowEditor.Flow.Name
                                </span>
                            }
                            <div class="actions">
                                @if (flowEditor.IsDirty)
                                {
                                    @if (active)
                                    {
                                        <button @onclick="() => SaveEditor(flowEditor)">
                                            <i class="icon-dirty fas fa-save" title="@lblSave"/>
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="() => ActivateFlow(flowEditor)" class="disabled">
                                            <i class="icon-dirty fas fa-save" title="@lblUnsavedChanges"/>
                                        </button>
                                    }
                                }
                                <button @onclick="() => CloseEditor(flowEditor)">
                                    <i class="fas fa-times" title="@lblClose"/>
                                </button>
                            </div>
                        </div>
                    }
                    <button class="flows-tab-button new-flow" @onclick="() => AddFlow()">
                        <i class="fas fa-plus"/>
                    </button>
                </div>

                <div class="flow-controls">
                    <div id="flow-zoomer">
                        <FlowSlider Min="50" Max="100" Prefix="Zoom:" Suffix="%" @bind-Value="@Zoom"/>
                    </div>
                </div>
            </div>
            <div class="flows-tabs-contents">
            </div>
        </div>
    </div>

    <Editor @ref="Editor" FlowElementEditor=@true></Editor>

    @if (ActiveFlow?.Flow != null)
    {
        <FlowPropertiesEditor @ref="PropertiesEditor" Flow="@ActiveFlow?.Flow"/>
    }
</div>


<FileFlows.Client.Components.Dialogs.FlowTemplatePicker @ref=TemplatePicker />

<NewFlowEditor @ref=AddEditor />

<ContextMenu Id="FlowContextMenu-Single">
    @if (ActiveFlow?.SelectedParts?.FirstOrDefault()?.Type == FlowElementType.SubFlow)
    {
        <Item OnClick="EditSubFlow">
            <i class="fas fa-subway"></i>
            @lblEditSubFlow
            <i class="fas fa-external-link-alt ctx-mn-newtab"></i>
        </Item>
        <BlazorContextMenu.Seperator/>
    }
    <Item OnClick="EditItem">
        <i class="fas fa-edit"></i>
        @lblEdit
    </Item>
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Copy">
        <i class="fas fa-copy"></i>
        @lblCopy
    </Item>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="DeleteItems">
        <i class="fas fa-trash"></i>
        @lblDelete
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>

<ContextMenu Id="FlowContextMenu-Multiple">
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Copy">
        <i class="fas fa-copy"></i>
        @lblCopy
    </Item>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="DeleteItems">
        <i class="fas fa-trash"></i>
        @lblDelete
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenProperties">
        <i class="fas fa-clipboard-list"></i>
        @lblProperties
    </Item>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>


<ContextMenu Id="FlowContextMenu-Basic">
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenProperties">
        <i class="fas fa-clipboard-list"></i>
        @lblProperties
    </Item>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>

<ScriptBrowser @ref="ScriptBrowser" />