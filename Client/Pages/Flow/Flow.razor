@namespace FileFlows.Client.Pages

@page "/flows/{uid:guid}"
@using FileFlows.Plugin

<div class="flow-wrapper">
    <PageView FullWidth=@true title="@Title">
        <HeadLeft>
            @if (App.Instance.IsMobile == false)
            {
                <input class="flow-name" type="text" @bind-value="@Name" autocomplete="off" placeholder="@lblName"/>
            }
        </HeadLeft>

        <Head>
            @if (ElementsVisible == false || App.Instance.IsMobile == false)
            {
                if (App.Instance.IsMobile)
                {
                    <input class="flow-name" type="text" @bind-value="@Name" autocomplete="off" placeholder="@lblName"/>
                }
                <button class="save-button" @onclick="() => Save()">
                    @if (IsSaving)
                    {
                        @lblSaving
                    }
                    else
                    {
                        @lblSave
                    }
                </button>
            }else if (App.Instance.IsMobile)
            {
                <button class="add-button" disabled="@string.IsNullOrEmpty(SelectedElement)" @onclick="() => AddSelectedElement()">
                    @lblAdd
                </button>
                
            }
            <button @onclick="() => Close()">@lblClose</button>
        </Head>

        <Body>
        <div class="flow-container @(App.Instance.NavMenuCollapsed ? "has-collapsed-menu" : "") @(App.Instance.IsMobile ? (ElementsVisible ? "elements-visible" : "elements-hidden") : "")">
            @if (App.Instance.IsMobile)
            {
                <i id="show-elements" class="show-elements fas fa-sitemap" @onclick="ShowElementsOnClick"></i>
            }
            <div class="flow-elements">
                <div class="flow-elements-top">
                    <div class="flow-elements-filter">
                        <input @ref="eleFilter" type="text" @bind-value="txtFilter" @bind-value:event="oninput" autocomplete="off" placeholder="@lblFilter" @onkeydown="FilterKeyDown"/>
                        <i class="fas fa-search"></i>
                    </div>
                    <div class="flow-script-browser">
                        <i class="fas fa-scroll" title="Script Repository" @onclick="() => OpenScriptBrowser()"></i>
                        <i class="fas fa-plus"></i>
                    </div>
                </div>
                <ul id="flow-elements-available">
                    @if (Filtered != null)
                    {
                        @foreach (var grp in Filtered.GroupBy(x => x.Group))
                        {
                            <li class="group">@Helpers.FlowHelper.FormatLabel(grp.Key)</li>
                            foreach (var ele in grp.OrderBy(x => x.Type == FlowElementType.Script ? x.Name : string.Empty)
                                .ThenBy(x =>
                                {
                                    if (grp.Key != "FfmpegBuilderNodes")
                                        return (int)x.Type;
                                    if (x.Type == FlowElementType.BuildStart)
                                        return 1;
                                    if (x.Type == FlowElementType.BuildEnd)
                                        return 2;
                                    if (x.Type == FlowElementType.BuildPart)
                                        return 3;
                                    return 100 + (int)x.Type;
                                }).ThenBy(x => x.DisplayName.Substring(x.DisplayName.IndexOf(":") + 1)))
                            {
                                <li id="@ele.Uid" draggable="true" class="flow-element draggable @ele.Type 
                                        @(ele.Obsolete ? "obsolete" : "") @(ele.Enterprise ? "enterprise" : "")
                                         @(App.Instance.IsMobile && SelectedElement == ele.Uid ? "selected" : "") "
                                    ondragstart="ffFlow.Mouse.dragElementStart(event)" @onclick="() => SelectPart(ele.Uid)">
                                    <div class="icon-wrapper"><span class="icon @ele.Icon"></span></div>
                                    @((ele.Type == FlowElementType.Script) ? ele.Name : ele.DisplayName.Substring(ele.DisplayName.IndexOf(":") + 1))

                                    @{
                                        string ribbonTT = "";
                                        if (ele.Obsolete)
                                        {
                                            ribbonTT = ele.ObsoleteMessage?.EmptyAsNull() ?? lblObsoleteMessage;
                                        }
                                        else if (ele.Enterprise)
                                        {
                                            ribbonTT = "Enterprise Flow Element";
                                        }
                                    }

                                    <div class="ribbon" title="@ribbonTT">
                                        <div class="ribbon-content">
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                    }
                </ul>
            </div>
            <div class="flow-parts" id="flow-parts">
                <canvas width="8000" height="4000" tabindex="1" oncontextmenu="return false"></canvas>
            </div>
            <div id="flow-zoomer">
                <FlowSlider Min="50" Max="100" Prefix="Zoom:" Suffix="%" @bind-Value="@Zoom"/>
            </div>
        </div>
        </Body>
    </PageView>

    <Editor @ref="Editor" FlowElementEditor=@true></Editor>

    @if (Model != null)
    {
        <FlowPropertiesEditor @ref="PropertiesEditor" Flow="@Model"/>
    }
</div>
<ContextMenu Id="FlowContextMenu-Single">
    @if (SelectedParts?.FirstOrDefault()?.Type == FlowElementType.SubFlow)
    {
        <Item OnClick="EditSubFlow">
            <i class="fas fa-subway"></i>
            @lblEditSubFlow
            <i class="fas fa-external-link-alt ctx-mn-newtab"></i>
        </Item>
        <BlazorContextMenu.Seperator/>
    }
    <Item OnClick="EditItem">
        <i class="fas fa-edit"></i>
        @lblEdit
    </Item>
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Copy">
        <i class="fas fa-copy"></i>
        @lblCopy
    </Item>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="DeleteItems">
        <i class="fas fa-trash"></i>
        @lblDelete
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>

<ContextMenu Id="FlowContextMenu-Multiple">
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Copy">
        <i class="fas fa-copy"></i>
        @lblCopy
    </Item>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="DeleteItems">
        <i class="fas fa-trash"></i>
        @lblDelete
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenProperties">
        <i class="fas fa-clipboard-list"></i>
        @lblProperties
    </Item>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>


<ContextMenu Id="FlowContextMenu-Basic">
    <Item OnClick="Add">
        <i class="fas fa-plus"></i>
        @lblAdd
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Paste">
        <i class="fas fa-paste"></i>
        @lblPaste
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="Redo">
        <i class="fas fa-redo"></i>
        @lblRedo
    </Item>
    <Item OnClick="Undo">
        <i class="fas fa-undo"></i>
        @lblUndo
    </Item>
    <BlazorContextMenu.Seperator/>
    <Item OnClick="OpenProperties">
        <i class="fas fa-clipboard-list"></i>
        @lblProperties
    </Item>
    <Item OnClick="OpenHelp">
        <i class="fas fa-question-circle"></i>
        @lblHelp
    </Item>
</ContextMenu>

<ScriptBrowser @ref="ScriptBrowser" />